/*
 * TCSS 305 - Assignment 6: Tetris
 */
package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.event.MouseInputAdapter;
import model.Board;
import model.TetrisPiece;

/**
 * This is the GUI of the Tetris project.
 * @author Ruitao Yu
 * @version November 18 2017
 *
 */
public class TetrisGUI extends JFrame implements Observer {
    
    /** the number of square in a row. */
    public static final int FOUR_LINE = 1200;
    
    /** the number of square in a row. */
    public static final int THREE_LINE = 300;
    
    /** the number of square in a row. */
    public static final int TWO_LINE = 100;
    
    /** the number of square in a row. */
    public static final int ONE_LINE = 40;
    
    /** The delay deduction when level up. */
    public static final int DELAY_DEDUCTION = 100;
    
    /** The rows of the board data. */
    public static final int ROW = 20;
    
    /** the number of square in a row. */
    public static final int DIVISOR_FOR_HEIGHT = 3;
    
    /** the number of square in a row. */
    public static final int SCORE_FOR_ONE_PIECE = 4;
    
    /** the number of square in a row. */
    public static final int LINES_NEED_TO_LEVEL_UP = 5;
    
    /** The delay of the timer. */
    public static final int DELAY = 1000;
    
    /** The default width of the board game panel. */
    public static final int DEFAULT_WIDTH = 350;
    
    /** The default height of the board game panel. */
    public static final int DEFAULT_HEIGHT = 700;
    
    /** the text description of the second color menu item. */
    public static final String WIN_ICON_DIR = "images/tetris_dribbble.png";

    /** the UW Tacoma icon. */
    public static final Icon ICON = new ImageIcon(WIN_ICON_DIR);
    
    /** the string that present the second player. */
    public static final String PLAYER_TWO = "Player 2";
    
    /**  */
    private static final long serialVersionUID = -3085923302014793773L;
    
    /** The panel for the game. */
    private VisualBoard myPlayerTwoGamePanel;

    /** The panel for the next piece. */
    private NextBoard myPlayerTwoNextPanel;
    
    /** The panel for the next piece. */
    private ScoreBoard myPlayerTwoScorePanel;
    
    /** The panel for the next piece. */
    private ScoreBoard myExtraPlayerTwoScorePanel;
    
    /** The panel for the game. */
    private VisualBoard myGamePanel;

    /** The panel for the next piece. */
    private NextBoard myNextPanel;
    
    /** The panel for the next piece. */
    private ScoreBoard myScorePanel;
    
    /** The panel for the next piece. */
    private ScoreBoard myExtraScorePanel;
    
    /** The back end board for the game. */
    private Board myBoard;
    
    /** The back end board for the game. */
    private Board myPlayerTwoBoard;
    
    /** The timer for the game. */
    private Timer myTimer;
    
    /** The timer for the game. */
    private Timer myPlayerTwoTimer;

    /** show if the key is enable. */
    private boolean myKey;
    
    /** the key value associate to the controls. */
    private int[] myKeyValues = new int[2 + 2 + 1];
    
    /** window size names. */
    private final String[] myWinName = {"Small (250 X 500)", "Normal (350 X 700)"
                    , "Large (450 X 900)"};
    
    /** the list of the window size buttons. */
    private final List<JMenuItem> myWinButtons = new ArrayList<JMenuItem>();

    /** the end button. */
    private JMenuItem myEnd;

    /** the start button. */
    private JMenuItem myStart;
    
    /** the single player button. */
    private JMenuItem myOnePlayer;

    /** the two player button. */
    private JMenuItem myTwoPlayer;

    /** my sound effects. */
    private SoundEffect mySoundEffect;

    /** have play two or not. */
    private boolean myIsTwoPlayer;
    
    /** the map contains all the usable key. */
    private final Map<Integer, Runnable> myKeyMap = new HashMap<Integer, Runnable>();
    
    /** the first player's panel. */
    private JPanel myPlayerOnePanel;
    
    /** the second player's panel. */
    private JPanel myPlayerTwoPanel;
    
    /** the width of this panel. */
    private int myWidth;
    
    /** the height of this panel. */
    private int myHeight;
    
    

    /**
     * The constructor.
     */
    public TetrisGUI() {
        super("Teris");
        setUpInterface();
    }
    
    /**
     * the method sets up the game.
     */
    private void setUpInterface() {
        myWidth = DEFAULT_WIDTH;
        myHeight = DEFAULT_HEIGHT;
        
        // set the base status of this window
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        getContentPane().setBackground(Color.DARK_GRAY);
        final Image image = Toolkit.getDefaultToolkit().getImage(WIN_ICON_DIR);
        setIconImage(image);
        addKeyListener(new KeyAction());
        
        setUpOnePlayMap();
        
        // Sound effect
        mySoundEffect = new SoundEffect();   
        
        // disable the keyboard
        myIsTwoPlayer = false;
        myKey = false;
        myBoard = new Board();
        myBoard.newGame();
        myPlayerTwoBoard = new Board();
        myPlayerTwoBoard.newGame();

        
        myPlayerOnePanel = new JPanel();
        myPlayerOnePanel.setLayout(new BorderLayout());
        
        myPlayerTwoPanel = new JPanel();
        myPlayerTwoPanel.setLayout(new BorderLayout());
        
        // set up all the window components
        setUpBoardPanel();
        setUpRightPanel();
        addPlayerTwoPanel();
        
        // initialize the game board
        add(myPlayerOnePanel, BorderLayout.WEST);
        twoPlayerMode(false);
        
        setMenuBar();
        activeMenuControlButtons(false);
        activePlayerButtons(false);
        
        // finalize the window
        setResizable(false);
        pack();
        setVisible(true);
        
        // set up a timer
        myTimer = new Timer(DELAY, new TimeAction());
        myPlayerTwoTimer = new Timer(DELAY, new PlayerTwoTimeAction());
    }
    
    /**
     * add the second play's board to the window.
     */
    private void addPlayerTwoPanel() {
        setUpPlayerTwoBoardPanel();
        setUpPlayerTwoRightPanel();
        add(myPlayerTwoPanel, BorderLayout.EAST);
    }

    /**
     * switch between one player and two players.
     * @param theIsTwoPlayer is two player or not
     */
    private void twoPlayerMode(final boolean theIsTwoPlayer) {
        myPlayerTwoPanel.setVisible(theIsTwoPlayer);
    }

    /**
     * this is the map for one player.
     */
    private void setUpOnePlayMap() {
        myKeyMap.clear();
        myKeyMap.put(KeyEvent.VK_W, () -> doRotate());
        myKeyMap.put(KeyEvent.VK_S, () -> doDown());
        myKeyMap.put(KeyEvent.VK_A, () -> doLeft());
        myKeyMap.put(KeyEvent.VK_D, () -> doRight());
        myKeyMap.put(KeyEvent.VK_UP, () -> doRotate());
        myKeyMap.put(KeyEvent.VK_DOWN, () -> doDown());
        myKeyMap.put(KeyEvent.VK_LEFT, () -> doLeft());
        myKeyMap.put(KeyEvent.VK_RIGHT, () -> doRight());
        myKeyMap.put(KeyEvent.VK_SPACE, () -> doDrop());
        myKeyMap.put(KeyEvent.VK_P, () -> doStop());
        myKeyMap.put(KeyEvent.VK_O, () -> doContinue());
        
    }
    
    /**
     * this is the map for one player.
     */
    private void setUpTwoPlayMap() {
        myKeyMap.clear();
        myKeyMap.put(KeyEvent.VK_W, () -> doRotate());
        myKeyMap.put(KeyEvent.VK_S, () -> doDown());
        myKeyMap.put(KeyEvent.VK_A, () -> doLeft());
        myKeyMap.put(KeyEvent.VK_D, () -> doRight());
        myKeyMap.put(KeyEvent.VK_UP, () -> doRotate2());
        myKeyMap.put(KeyEvent.VK_DOWN, () -> doDown2());
        myKeyMap.put(KeyEvent.VK_LEFT, () -> doLeft2());
        myKeyMap.put(KeyEvent.VK_RIGHT, () -> doRight2());
        myKeyMap.put(KeyEvent.VK_ENTER, () -> doDrop2());
        myKeyMap.put(KeyEvent.VK_SPACE, () -> doDrop());
        myKeyMap.put(KeyEvent.VK_P, () -> doStop());
        myKeyMap.put(KeyEvent.VK_O, () -> doContinue());
        
    }

    /**
     * This method set up a menu bar.
     */
    private void setMenuBar() {
        // create a menu bar
        final JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);
        
        // Set up the game menu
        final JMenu game = new JMenu("Game");
        myStart = new JMenuItem("Start new Game");
        myEnd = new JMenuItem("End Game");
        myOnePlayer = new JMenuItem("Single Player mode");
        myTwoPlayer = new JMenuItem("Two players mode");
        final JMenuItem exit = new JMenuItem("Exit");
        
        // set up the mnemonics
        game.setMnemonic(KeyEvent.VK_G);
        myStart.setMnemonic(KeyEvent.VK_S);
        myEnd.setMnemonic(KeyEvent.VK_E);
        myOnePlayer.setMnemonic(KeyEvent.VK_I);
        myTwoPlayer.setMnemonic(KeyEvent.VK_T);
        exit.setMnemonic(KeyEvent.VK_X);
        
        // set up action listeners for the Menu items
        myStart.addActionListener(event -> {
            mySoundEffect.playBGM();
            startGame();
            activeMenuControlButtons(true);
        });
        myEnd.addActionListener(event -> {
            checkHighest();
            endGame(null);
            setScoreZero();
            activeKey(false);
            
        });
        
        myOnePlayer.addActionListener(event -> {
            if (myPlayerTwoTimer.isRunning()) {
                JOptionPane.showMessageDialog(this, "Please end the game before switch mode.");
                return;
            }
            setUpOnePlayMap();
            myIsTwoPlayer = false;
            twoPlayerMode(false);
            pack();
            activePlayerButtons(false);
        });
        
        myTwoPlayer.addActionListener(event -> {
            if (myTimer.isRunning()) {
                JOptionPane.showMessageDialog(this
                                              , "Please end the game before switch mode!");
                return;
            }
            setUpTwoPlayMap();
            myIsTwoPlayer = true;
            twoPlayerMode(true);
            pack();
            activePlayerButtons(true);
        });
        
        exit.addActionListener(event -> {
            dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        });
        
        // add the menu items to the menu
        game.add(myStart);
        game.add(myEnd);
        game.add(myOnePlayer);
        game.add(myTwoPlayer);
        game.add(exit);      
        menuBar.add(game);
        
        // set up the next menu
        setUpWindowMenu(menuBar);
    }
    
    /**
     * when the game is over.
     * @param theWinner the name of the winner.
     */
    public void endGame(final String theWinner) {
            
        mySoundEffect.stopBGM();
        stopTimer();
        if (myIsTwoPlayer && theWinner != null) {
            JOptionPane.showMessageDialog(this
                                          , theWinner + " is the Winner! \n" 
                                          + "Congratulations!"
                                          , "Game Winner"
                                          , JOptionPane.PLAIN_MESSAGE
                                          , ICON);
        } else {
            
            JOptionPane.showMessageDialog(this
                                          , "Game Over! \n" 
                                          + "Good Luck next time!"
                                          , "Game Over"
                                          , JOptionPane.PLAIN_MESSAGE
                                          , ICON);
        }
        checkHighest();
        activeMenuControlButtons(false);
        activeKey(false);
    }
    
    /**
     * set up the window menu.
     * @param theMenuBar the menu Bar.
     */
    private void setUpWindowMenu(final JMenuBar theMenuBar) {
        final JMenu view = new JMenu("View");
        view.setMnemonic(KeyEvent.VK_V);
        
        // create 3 widow size menu item
        setUpWinSize(myWinName[0], view, KeyEvent.VK_S);
        setUpWinSize(myWinName[1], view, KeyEvent.VK_N);
        setUpWinSize(myWinName[2], view, KeyEvent.VK_L);
        theMenuBar.add(view);
        setUpControlMenu(theMenuBar);
    }
    
    /**
     * This method set up a menu item in the window menu.
     * @param theSize the text of the menu item
     * @param theView the menu
     * @param theKey the key value
     */
    private void setUpWinSize(final String theSize, final JMenu theView, final int theKey) {
        // create a menu item
        final JMenuItem item = new JMenuItem(theSize);
        item.setMnemonic(theKey);
        
        // attach it to a action listener
        item.addActionListener(event -> {
            // get the width and height from the string
            final String size = ((JMenuItem) event.getSource()).getText();
            final int width = Integer.valueOf(theSize.substring(size.indexOf('(')
                                                          + 1, size.indexOf('(') + 4));
            final int height = Integer.valueOf(theSize.substring(size.indexOf('X')
                                                           + 2, size.indexOf(')')));
            // enable all item except this one
            disableWin(size);
            
            myWidth = width;
            myHeight = height;
            // update the new width and height in each panel
            // pack the window
            myGamePanel.setWinSize(width, height);
            myNextPanel.setWinSize(width, height);
            myScorePanel.setWinSize(width, height);
            myExtraScorePanel.setWinSize(width, height);
            myPlayerTwoGamePanel.setWinSize(width, height);
            myPlayerTwoNextPanel.setWinSize(width, height);
            myPlayerTwoScorePanel.setWinSize(width, height);
            myExtraPlayerTwoScorePanel.setWinSize(width, height);
            myPlayerOnePanel.setPreferredSize(new Dimension(myWidth 
                                                            + myHeight / DIVISOR_FOR_HEIGHT
                                                            , myHeight));
            myPlayerTwoPanel.setPreferredSize(new Dimension(myWidth 
                                                            + myHeight / DIVISOR_FOR_HEIGHT
                                                            , myHeight));

            pack();
        });
        
        if (item.getText().equals(myWinName[1])) {
            item.setEnabled(false);
        }
        // add the item to the view menu
        myWinButtons.add(item);
        theView.add(item);
    }
    
    /**
     * disable specific button.
     * @param theSizeName the text in the button
     */
    private void disableWin(final String theSizeName) {
        for (int i = 0; i < myWinButtons.size(); i++) {
            if (myWinButtons.get(i).getText().equals(theSizeName)) {
                myWinButtons.get(i).setEnabled(false);
            } else {
                myWinButtons.get(i).setEnabled(true);
            }
        }
    }
    /**
     * set up the control menu item.
     * @param theMenuBar the menu bar
     */
    private void setUpControlMenu(final JMenuBar theMenuBar) {
        
        // assign value to the list
        myKeyValues[0] = KeyEvent.VK_W;
        myKeyValues[1] = KeyEvent.VK_S;
        myKeyValues[2] = KeyEvent.VK_A;
        myKeyValues[2 + 1] = KeyEvent.VK_D;
        myKeyValues[2 + 2] = KeyEvent.VK_SPACE;
        
        // create a menu and 5 menu item
        final JMenu control = new JMenu("Control");
        control.setMnemonic(KeyEvent.VK_C);
        
        modifyButtons(control, "Set rotate as...", KeyEvent.VK_T);
        modifyButtons(control, "Set down as...", KeyEvent.VK_D);
        modifyButtons(control, "Set left as...", KeyEvent.VK_L);
        modifyButtons(control, "Set right as...", KeyEvent.VK_R);
        modifyButtons(control, "set drop as...", KeyEvent.VK_O);
        theMenuBar.add(control);
        setUpAboutMenu(theMenuBar);
    }
    
    /**
     * create a button that can be modified the controls keys.
     * @param theControl the control menu
     * @param theName the name text of this menu item
     * @param theKey the key value
     */
    private void modifyButtons(final JMenu theControl, final String theName
                               , final int theKey) {
        final JMenuItem button = new JMenuItem(theName);
        button.setMnemonic(theKey);
        // attach the menu item to a action listener
        button.addActionListener(event -> {
            final String name = ((JMenuItem) event.getSource()).getText();
            
            final String newName = 
                            JOptionPane.showInputDialog("Enter the key you want to set " 
                            + name.substring(name.indexOf(' ') + 1) 
                            + "\n" + "Can only accept letters and numbers.");

            // if the input's length is 1
            // get the value of the input in integer value
            // put the value in the list
            if (newName != null) {
                final String upperName = newName.toUpperCase(Locale.ENGLISH);
                final int value = upperName.charAt(0);
                if (upperName.length() > 1 || myKeyMap.containsKey(value)) {
                    if (upperName.length() > 1) {
                        // if the length is greater than 1, show a message
                        JOptionPane.showMessageDialog(this
                                                      , "You just enter a wrong input. "
                                                                      + "Please try again!");
                    }
                       
                    // check if the key value is in the list already
                    if (myKeyMap.containsKey(value)) {
                        JOptionPane.showMessageDialog(this, "The key you enter is already"
                                        + " used. Please try another one");
                    }
                    return;
                }
                
                // set the text
                changeText(name, upperName, value);
 
            } 
        });
        theControl.add(button);
    }
    
    /**
     * set the text in the list to be a new one.
     * @param theName the name of the set menu item
     * @param theUpperName the new key value as a string
     * @param theValue the new key value as a integer
     */
    private void changeText(final String theName
                            , final String theUpperName
                            , final int theValue) {
        if (theName.contains("rotate")) {
            myKeyMap.remove(myKeyValues[0]);
            myKeyMap.put(theValue, () -> doRotate());
            myKeyValues[0] = theValue;
            myScorePanel.changeText(0, theUpperName);
            myExtraScorePanel.changeText(0, theUpperName);
        } else if (theName.contains("down")) {
            myKeyMap.remove(myKeyValues[1]);
            myKeyMap.put(theValue, () -> doDown());
            myKeyValues[1] = theValue;
            myScorePanel.changeText(1, theUpperName);
            myExtraScorePanel.changeText(1, theUpperName);
        } else if (theName.contains("left")) {
            myKeyMap.remove(myKeyValues[2]);
            myKeyMap.put(theValue, () -> doLeft());
            myKeyValues[2] = theValue;
            myScorePanel.changeText(2, theUpperName);
            myExtraScorePanel.changeText(2, theUpperName);
        } else if (theName.contains("right")) {
            myKeyMap.remove(myKeyValues[2 + 1]);
            myKeyMap.put(theValue, () -> doRight());
            myKeyValues[2 + 1] = theValue;
            myScorePanel.changeText(2 + 1, theUpperName);
            myExtraScorePanel.changeText(2 + 1, theUpperName);
        } else if (theName.contains("drop")) {
            myKeyMap.remove(myKeyValues[2 + 2]);
            myKeyMap.put(theValue, () -> doDrop());
            myKeyValues[2 + 2] = theValue;
            myScorePanel.changeText(2 + 2, theUpperName);
            myExtraScorePanel.changeText(2 + 2, theUpperName);

        }
    }

    /**
     * set the player mode to the current selection..
     * @param theIsEnable active or not
     */
    private void activePlayerButtons(final boolean theIsEnable) {
        // the start and end can not have the same value
        myOnePlayer.setEnabled(theIsEnable);
        myTwoPlayer.setEnabled(!theIsEnable);
    }  


    /**
     * set the control buttons in the menu to be the given value.
     * @param theIsEnable active or not
     */
    private void activeMenuControlButtons(final boolean theIsEnable) {
        // the start and end can not have the same value
        myStart.setEnabled(!theIsEnable);
        myEnd.setEnabled(theIsEnable);
    }
    
    
    /**
     * set up the about menu.
     * @param theMenuBar the menu bar.
     */
    private void setUpAboutMenu(final JMenuBar theMenuBar) {
        // create a help menu and an about menu item 
        // attach a listener to the about item
        // when clicked, show the author information of this project
        final JMenu help = new JMenu("Help");
        final JMenuItem about = new JMenuItem("About");
        help.setMnemonic(KeyEvent.VK_H);
        about.setMnemonic(KeyEvent.VK_A);
        
        about.addActionListener(event -> {
            JOptionPane.showMessageDialog(this
                                          , "Ruitao Yu" + '\n' 
                                                          + "Autumn 2017" + '\n' 
                                                          + "TCSS 305 Assignment 6 Tetris"
                                                          , "About."
                                                          , JOptionPane.INFORMATION_MESSAGE
                                                          , ICON);
        });
        help.add(about);
        theMenuBar.add(help);
    }

    /**
     * the method sets up the next piece panel.
     */
    private void setUpRightPanel() {
        // the control panel contains the next piece panel and button panel
        // the next piece panel shows the next piece
        final JPanel controlPanel = new JPanel();
        controlPanel.setLayout(new BorderLayout());
        myNextPanel = new NextBoard(this, myWidth, myHeight);
        myScorePanel = new ScoreBoard(this , myWidth, myHeight, PLAYER_TWO);
        myExtraScorePanel = new ScoreBoard(this , myWidth, myHeight, PLAYER_TWO);
        
        final JLabel imgLabel = new JLabel(new ImageIcon("images/pop.png"));
        imgLabel.addMouseListener(new MyMouseInputAdapter());
        myScorePanel.add(imgLabel);
        
        // add the panels to there parent
        controlPanel.add(myNextPanel, BorderLayout.NORTH);
        controlPanel.add(myScorePanel, BorderLayout.SOUTH);
        myPlayerOnePanel.add(controlPanel, BorderLayout.EAST);
        
        myBoard.addObserver((Observer) myNextPanel);
    }
    
    
    /**
     * this method sets up the game board.
     */
    private void setUpBoardPanel() {
        // the board panel of this game
        // add it to the west of the window border
        myGamePanel = new VisualBoard(myWidth , myHeight);
        myPlayerOnePanel.add(myGamePanel, BorderLayout.WEST);
        myBoard.addObserver((Observer) myGamePanel);
        myBoard.addObserver((Observer) this);
    }
    
    /**
     * the method sets up the next piece panel.
     */
    private void setUpPlayerTwoRightPanel() {
        final JPanel controlPanel = new JPanel();
        controlPanel.setLayout(new BorderLayout());
        myPlayerTwoNextPanel = new NextBoard(this, myWidth, myHeight);
        myPlayerTwoScorePanel = new ScoreBoard(this , myWidth, myHeight, "Player 1");
        myExtraPlayerTwoScorePanel = new ScoreBoard(this , myWidth, myHeight, "Player 1");
        
        final JLabel imgLabel = new JLabel(new ImageIcon("images/pop.png"));
        imgLabel.addMouseListener(new MyMouseInputAdapter());
        myPlayerTwoScorePanel.add(imgLabel);
        
        // add the panels to there parent
        controlPanel.add(myPlayerTwoNextPanel, BorderLayout.NORTH);
        controlPanel.add(myPlayerTwoScorePanel, BorderLayout.SOUTH);
        myPlayerTwoPanel.add(controlPanel, BorderLayout.WEST);
        
        myPlayerTwoBoard.addObserver((Observer) myPlayerTwoNextPanel);
//        myPlayerTwoBoard.addObserver((Observer) myPlayerTwoScorePanel);
    }
    
    /**
     * this method sets up the game board.
     */
    private void setUpPlayerTwoBoardPanel() {
        // the board panel of this game
        // add it to the west of the window border
        myPlayerTwoGamePanel = new VisualBoard(myWidth , myHeight);
        myPlayerTwoPanel.add(myPlayerTwoGamePanel, BorderLayout.EAST);
        myPlayerTwoBoard.addObserver((Observer) myPlayerTwoGamePanel);
        myPlayerTwoBoard.addObserver((Observer) this);
    }

    
    /**
     * method to start the game.
     */
    public void startGame() {
        // start a new game and enable the buttons
        // start the timer
        myBoard.newGame();
        activeKey(true);
        myTimer.start();
        if (myIsTwoPlayer) {
            myPlayerTwoBoard.newGame();
            myPlayerTwoTimer.start();
        }
    }
    
    /**
     * enable the buttons.
     * @param theKey if the button is enable.
     */
    public void activeKey(final boolean theKey) {
        myKey = theKey;

    }
    
    /**
     * enable the buttons.
     * @param theKey if the button is enable.
     */
    public void activeButton(final boolean theKey) {
        activeMenuControlButtons(theKey);
    }
    
    /**
     * start the timer.
     */
    public void startTimer() {
        myTimer.start();
        if (myIsTwoPlayer) {
            myPlayerTwoTimer.start();
        }
    }
    
    /**
     * stop the timer.
     */
    public void stopTimer() {
        myTimer.stop();
        if (myIsTwoPlayer) {
            myPlayerTwoTimer.stop();
        }
    }
    
    /**
     * see if it is on 2 players mode.
     * @return is 2 player mode or not.
     */
    public boolean isTwoPlayer() {
        return myIsTwoPlayer;
    }
    
    /**
     * speed up the timer by 50 if level up.
     */
    public void speedUpPlayerOneTimer() {
        myTimer.setDelay(myTimer.getDelay() - DELAY_DEDUCTION);
    }
    
    /**
     * speed up the timer by 50 if level up.
     */
    public void speedUpPlayerTwoTimer() {
        myPlayerTwoTimer.setDelay(myPlayerTwoTimer.getDelay() - DELAY_DEDUCTION);
    }
    
    /**
     * set the score to 0.
     */
    public void setScoreZero() {
        myScorePanel.resetAllScore();
        myExtraScorePanel.resetAllScore();
        myPlayerTwoScorePanel.resetAllScore();
        myExtraPlayerTwoScorePanel.resetAllScore();
        myTimer.setDelay(DELAY);
        myPlayerTwoTimer.setDelay(DELAY);
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doDown() {
        mySoundEffect.playMove();
        myBoard.down();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doRotate() {
        mySoundEffect.playRotate();
        myBoard.rotateCW();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doLeft() {
        mySoundEffect.playMove();
        myBoard.right();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doRight() {
        mySoundEffect.playMove();
        myBoard.left();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doDrop() {
        mySoundEffect.playDrop();
        myBoard.drop();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doDown2() {
        mySoundEffect.playMove();
        myPlayerTwoBoard.down();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doRotate2() {
        mySoundEffect.playRotate();
        myPlayerTwoBoard.rotateCW();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doLeft2() {
        mySoundEffect.playMove();
        myPlayerTwoBoard.right();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doRight2() {
        mySoundEffect.playMove();
        myPlayerTwoBoard.left();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doDrop2() {
        mySoundEffect.playDrop();
        myPlayerTwoBoard.drop();
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doStop() {
        stopTimer();
        activeKey(false);
    }
    
    /**
     * Responds to a down key pressed.
     */
    private void doContinue() {
        startTimer();
        activeKey(true);
    }
    


    @Override
    public void update(final Observable theO, final Object theObject) {
//        System.out.println(theO == myBoard);
//        System.out.println(theO == myPlayerTwoBoard);
//        System.out.println("_______________");
        if (theObject instanceof TetrisPiece) {
            if (theO.equals(myBoard)) {
                updateScorceDropPiece(myScorePanel);
                updateScorceDropPiece(myExtraScorePanel);
            } else {
                updateScorceDropPiece(myPlayerTwoScorePanel);
                updateScorceDropPiece(myExtraPlayerTwoScorePanel);
            }
        } else if (theObject instanceof Integer[]) {
            final int lines = ((Integer[]) theObject).length;
            
            if (theO.equals(myBoard)) {
                updateScorceLineCancel(myScorePanel, lines);
                updateScorceLineCancel(myExtraScorePanel, lines);
            } else {
                updateScorceLineCancel(myPlayerTwoScorePanel, lines);
                updateScorceLineCancel(myExtraPlayerTwoScorePanel, lines);
            }
        }  else if (theObject instanceof Boolean) {
            
            if (theO.equals(myBoard)) {
                endGame(myScorePanel.getMyPlayerName());
            } else {
                endGame(myPlayerTwoScorePanel.getMyPlayerName());
            }
        }
        
    }
    
    /**
     * update the score based on how many line is canceled.
     * @param thePanel the score board that need to be update
     * @param theLines the number of line is canceled
     */
    private void updateScorceLineCancel(final ScoreBoard thePanel, final int theLines) {
        if (theLines - thePanel.getMyToLevelUp() > 0) {
            updateScoreBoard(thePanel, thePanel.getMyToLevelUp());
            thePanel.setMyLevel(thePanel.getMyLevel() + 1);
            updateScoreBoard(thePanel, theLines - thePanel.getMyToLevelUp());
            thePanel.setMyToLevelUp(LINES_NEED_TO_LEVEL_UP 
                                    - theLines - thePanel.getMyToLevelUp());
        } else if (theLines - thePanel.getMyToLevelUp() == 0) {
            updateScoreBoard(thePanel, theLines);
            thePanel.setMyLevel(thePanel.getMyLevel() + 1);
            thePanel.setMyToLevelUp(LINES_NEED_TO_LEVEL_UP);
        } else {
            updateScoreBoard(thePanel, theLines);
            thePanel.setMyToLevelUp(thePanel.getMyToLevelUp() - theLines);
        }
        thePanel.repaint();
    }
    
    /**
     * update the score based on how many line is canceled.
     * @param thePanel the score board that need to be update
     * @param theLines the number of line is canceled
     */
    private void updateScoreBoard(final ScoreBoard thePanel, final int theLines) {

        switch (theLines) {
            case 1:
                thePanel.setMyScore(thePanel.getMyScore() + ONE_LINE * thePanel.getMyLevel());
                break;
            case 2:
                thePanel.setMyScore(thePanel.getMyScore() + TWO_LINE * thePanel.getMyLevel());
                break;
            case DIVISOR_FOR_HEIGHT:
                thePanel.setMyScore(thePanel.getMyScore()
                                    + THREE_LINE * thePanel.getMyLevel());
                break;
            case SCORE_FOR_ONE_PIECE:
                thePanel.setMyScore(thePanel.getMyScore() + FOUR_LINE * thePanel.getMyLevel());
                break;
            default:
                break;
        }
    }
    
    
    /**
     * add 4 points to the score if the piece is drop.
     * @param thePanel the score board that need to be update
     */
    private void updateScorceDropPiece(final ScoreBoard thePanel) {
        final int count = thePanel.getMyCount();
        thePanel.setMyCount(thePanel.getMyCount() + 1);
        if (count >= 2) {
            thePanel.setMyScore(thePanel.getMyScore() + SCORE_FOR_ONE_PIECE);
        }
        thePanel.repaint();
    }
    
    
    /**
     * check if there is a new record.
     */
    private void checkHighest() {
//        if (myScorePanel.getMyHighestScore() < myScorePanel.getMyScore()) {
//            myScorePanel.setMyHighestScore(myScorePanel.getMyScore());
//        }
//        if (myIsTwoPlayer && myPlayerTwoScorePanel.getMyHighestScore() 
//                        < myPlayerTwoScorePanel.getMyScore()) {
//            myPlayerTwoScorePanel.setMyHighestScore(myPlayerTwoScorePanel.getMyScore());
//        }
        final int highest = myScorePanel.getMyHighestScore();
        final int playerOneScore = myScorePanel.getMyScore();
        final int playerTwoScore = myPlayerTwoScorePanel.getMyScore();
        if (playerOneScore > highest || playerTwoScore > highest) {
            final int higher = Integer.max(playerOneScore, playerTwoScore);
            myScorePanel.setMyHighestScore(higher);
            myExtraScorePanel.setMyHighestScore(higher);
            myPlayerTwoScorePanel.setMyHighestScore(higher);
            myExtraPlayerTwoScorePanel.setMyHighestScore(higher);
        }

        myScorePanel.repaint();
        myExtraScorePanel.repaint();
        myPlayerTwoScorePanel.repaint();
        myExtraPlayerTwoScorePanel.repaint();
        setScoreZero();
    }

    /**
     * the action for the timer.
     * @author Ruitao Yu
     * @version November 18 2017
     */
    class TimeAction implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            // move the game to the next step
            myBoard.step();
        }
    }
    
    /**
     * the action for the timer.
     * @author Ruitao Yu
     * @version November 18 2017
     *
     */
    class PlayerTwoTimeAction implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            // move the game to the next step
            myPlayerTwoBoard.step();
        }
        
    }
    
    /**
     * the key action for the keyboard.
     * @author Ruitao Yu
     * @version November 18 2017
     *
     */
    class KeyAction implements KeyListener {
        @Override
        public void keyTyped(final KeyEvent etheEvent) {
           
        }

        @Override
        public void keyPressed(final KeyEvent theEvent) {
            // if the keys are enable
            // see if it match any of these
            if (myKey) {
                final int pressedKey = theEvent.getKeyCode();
                if (myKeyMap.containsKey(pressedKey)) {
                    myKeyMap.get(pressedKey).run();
                }
            }
        }

        @Override
        public void keyReleased(final KeyEvent theEvent) {
            if (!myKey && theEvent.getKeyCode() == KeyEvent.VK_O) {
                doContinue();
            }
        }
    }
    
    class MyMouseInputAdapter extends MouseInputAdapter {

        final JFrame tempScoreBoard = new JFrame();
        
        /**
         * the method fires when the mouse's button is pressed.
         */
        @Override
        public void mousePressed(final MouseEvent theEvent) {
            
            
            
            final ScoreBoard scoreBoard = (ScoreBoard) theEvent.getComponent().getParent();
            
            final Point location = scoreBoard.getLocationOnScreen();
            
            scoreBoard.setVisible(false);
            
            if ("Player 2".equals(scoreBoard.getMyPlayerName())) {
                tempScoreBoard.add(myExtraScorePanel);
            } else {
                tempScoreBoard.add(myExtraPlayerTwoScorePanel);
            }

            tempScoreBoard.setLocation(location);
            tempScoreBoard.setPreferredSize(scoreBoard.getPreferredSize());
            tempScoreBoard.setVisible(true);
            tempScoreBoard.addWindowListener(new WindowAction(scoreBoard));
            tempScoreBoard.pack();
        }
        
        class WindowAction extends WindowAdapter {
            
            private ScoreBoard myPanel;
            
            public WindowAction(final ScoreBoard thePanel) {
                myPanel = thePanel;
            }
            @Override
            public void windowClosing(WindowEvent theEvent) {
                myPanel.setVisible(true);
                
            }
            
            @Override
            public void windowClosed(WindowEvent theEvent) {
                tempScoreBoard.dispatchEvent(new WindowEvent(tempScoreBoard
                                                             , WindowEvent.WINDOW_CLOSING));
            }
        }
        

        
    }
    
 
}

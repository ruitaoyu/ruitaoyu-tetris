/*
 * TCSS 305 - Assignment 6: Tetris
 */
package view;

import java.io.File;
import java.io.IOException;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

/**
 * @author Ruitao Yu
 * @version November 30 2017
 */
public class SoundEffect {

    /** the clip of the BGM. */
    private Clip myBGMClip;
    
    /** the clip of the BGM. */
    private AudioInputStream myBGMSteam;
    

    /**
     * method that plays a clip depends on the action of a tetris.
     * @param theFile the directory of the sound file.
     */
    private void playClip(final File theFile) {
        
        try {
            
            final AudioInputStream stream;
            final AudioFormat format;
            final DataLine.Info info;
            final Clip clip;

            stream = AudioSystem.getAudioInputStream(theFile);
            format = stream.getFormat();
            info = new DataLine.Info(Clip.class, format);
            clip = (Clip) AudioSystem.getLine(info);
            clip.open(stream);
            clip.start();
            
        } catch (final UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        } catch (final LineUnavailableException e) {
            e.printStackTrace();
        }
        
    }

    /**
     * 
     */
    public void playBGM() {
        try {
            
            final AudioFormat format;
            final DataLine.Info info;

            myBGMSteam = AudioSystem.getAudioInputStream(new File("sounds/bolero.wav"));
            format = myBGMSteam.getFormat();
            info = new DataLine.Info(Clip.class, format);
            myBGMClip = (Clip) AudioSystem.getLine(info);
            myBGMClip.open(myBGMSteam);
            myBGMClip.loop(Clip.LOOP_CONTINUOUSLY);
        } catch (final UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        } catch (final LineUnavailableException e) {
            e.printStackTrace();
        }
        
    }
    
    /**
     * stop the BGM.
     */
    public void stopBGM() {
        myBGMClip.close();
    }
    
    /**
    * start the BGM.
    */
    public void startBGM() {
        try {
            try {
                myBGMClip.open(myBGMSteam);
            } catch (final IOException e) {
                e.printStackTrace();
            }
            myBGMClip.loop(Clip.LOOP_CONTINUOUSLY);
        } catch (final LineUnavailableException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
    /**
     * play the drop sounds effect.
     */
    public void playDrop() {
        playClip(new File("sounds/drop.wav"));
    }
    
    /**
     * play the drop sounds effect.
     */
    public void playRotate() {
        playClip(new File("sounds/rotate.wav"));
    }
    
    /**
     * play the drop sounds effect.
     */
    public void playMove() {
        playClip(new File("sounds/move.wav"));
    }

}
